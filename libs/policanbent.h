/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 38.0.2 Wed Jul  5 00:07:34 2023.
 */

#ifndef POLICANBENT_H
#define POLICANBENT_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define POLICANBENT_GB_ERROR_FRAME_ID (0x222u)
#define POLICANBENT_GB_DATA_FRAME_ID (0x422u)
#define POLICANBENT_RX_GRETA_FRAME_ID (0x421u)
#define POLICANBENT_BOB_SRM_FRAME_ID (0x441u)
#define POLICANBENT_BOB_HS_FRAME_ID (0x442u)
#define POLICANBENT_BOB_HR_FRAME_ID (0x444u)

/* Frame lengths in bytes. */
#define POLICANBENT_GB_ERROR_LENGTH (2u)
#define POLICANBENT_GB_DATA_LENGTH (1u)
#define POLICANBENT_RX_GRETA_LENGTH (2u)
#define POLICANBENT_BOB_SRM_LENGTH (4u)
#define POLICANBENT_BOB_HS_LENGTH (4u)
#define POLICANBENT_BOB_HR_LENGTH (1u)

/* Extended or standard frame types. */
#define POLICANBENT_GB_ERROR_IS_EXTENDED (0)
#define POLICANBENT_GB_DATA_IS_EXTENDED (0)
#define POLICANBENT_RX_GRETA_IS_EXTENDED (0)
#define POLICANBENT_BOB_SRM_IS_EXTENDED (0)
#define POLICANBENT_BOB_HS_IS_EXTENDED (0)
#define POLICANBENT_BOB_HR_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/**
 * Signals in message GbError.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_gb_error_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gb_err_code;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gb_mode;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gb_shifting;

    /**
     * Range: 0..16 (0..16 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gb_gear;
};

/**
 * Signals in message GbData.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_gb_data_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gb_mode;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gb_shifting;

    /**
     * Range: 0..16 (0..16 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gb_gear;
};

/**
 * Signals in message RxGreta.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_rx_greta_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rx_timeout;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t telek_battery;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rx_shifting;
};

/**
 * Signals in message BobSRM.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_bob_srm_t {
    /**
     * Range: 0..10000 (0..1000 W)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t srm_power;

    /**
     * Range: 0..10000 (0..1000 rpm)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t srm_cadence;
};

/**
 * Signals in message BobHS.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_bob_hs_t {
    /**
     * Range: 0..20000 (0..200 km/h)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t hs_speed;

    /**
     * Range: 0..9000 (0..9000 m)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hs_distance;
};

/**
 * Signals in message BobHR.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_bob_hr_t {
    /**
     * Range: 0..250 (0..250 bpm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t heart_rate;
};

/**
 * Pack message GbError.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_gb_error_pack(
    uint8_t *dst_p,
    const struct policanbent_gb_error_t *src_p,
    size_t size);

/**
 * Unpack message GbError.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_gb_error_unpack(
    struct policanbent_gb_error_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_gb_error_gb_err_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_gb_error_gb_err_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_gb_error_gb_err_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_gb_error_gb_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_gb_error_gb_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_gb_error_gb_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_gb_error_gb_shifting_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_gb_error_gb_shifting_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_gb_error_gb_shifting_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_gb_error_gb_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_gb_error_gb_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_gb_error_gb_gear_is_in_range(uint8_t value);

/**
 * Pack message GbData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_gb_data_pack(
    uint8_t *dst_p,
    const struct policanbent_gb_data_t *src_p,
    size_t size);

/**
 * Unpack message GbData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_gb_data_unpack(
    struct policanbent_gb_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_gb_data_gb_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_gb_data_gb_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_gb_data_gb_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_gb_data_gb_shifting_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_gb_data_gb_shifting_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_gb_data_gb_shifting_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_gb_data_gb_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_gb_data_gb_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_gb_data_gb_gear_is_in_range(uint8_t value);

/**
 * Pack message RxGreta.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_rx_greta_pack(
    uint8_t *dst_p,
    const struct policanbent_rx_greta_t *src_p,
    size_t size);

/**
 * Unpack message RxGreta.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_rx_greta_unpack(
    struct policanbent_rx_greta_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_rx_greta_rx_timeout_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_rx_greta_rx_timeout_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_rx_greta_rx_timeout_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_rx_greta_telek_battery_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_rx_greta_telek_battery_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_rx_greta_telek_battery_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_rx_greta_rx_shifting_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_rx_greta_rx_shifting_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_rx_greta_rx_shifting_is_in_range(uint8_t value);

/**
 * Pack message BobSRM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_bob_srm_pack(
    uint8_t *dst_p,
    const struct policanbent_bob_srm_t *src_p,
    size_t size);

/**
 * Unpack message BobSRM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_bob_srm_unpack(
    struct policanbent_bob_srm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t policanbent_bob_srm_srm_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_bob_srm_srm_power_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_bob_srm_srm_power_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t policanbent_bob_srm_srm_cadence_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_bob_srm_srm_cadence_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_bob_srm_srm_cadence_is_in_range(uint16_t value);

/**
 * Pack message BobHS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_bob_hs_pack(
    uint8_t *dst_p,
    const struct policanbent_bob_hs_t *src_p,
    size_t size);

/**
 * Unpack message BobHS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_bob_hs_unpack(
    struct policanbent_bob_hs_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t policanbent_bob_hs_hs_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_bob_hs_hs_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_bob_hs_hs_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t policanbent_bob_hs_hs_distance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_bob_hs_hs_distance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_bob_hs_hs_distance_is_in_range(uint16_t value);

/**
 * Pack message BobHR.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_bob_hr_pack(
    uint8_t *dst_p,
    const struct policanbent_bob_hr_t *src_p,
    size_t size);

/**
 * Unpack message BobHR.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_bob_hr_unpack(
    struct policanbent_bob_hr_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_bob_hr_heart_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_bob_hr_heart_rate_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_bob_hr_heart_rate_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif

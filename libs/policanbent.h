/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.5 Fri Nov 29 19:07:23 2024.
 */

#ifndef POLICANBENT_H
#define POLICANBENT_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define POLICANBENT_GB_ERROR_FRAME_ID (0x222u)
#define POLICANBENT_GB_DATA_FRAME_ID (0x422u)
#define POLICANBENT_GRETA_DATA_FRAME_ID (0x421u)
#define POLICANBENT_BOB_SRM_POWER_FRAME_ID (0x441u)
#define POLICANBENT_BOB_SRM_CADENCE_FRAME_ID (0x442u)
#define POLICANBENT_BOB_HS_SPEED_FRAME_ID (0x443u)
#define POLICANBENT_BOB_HS_DISPLACEMENT_FRAME_ID (0x444u)
#define POLICANBENT_BOB_HR_FRAME_ID (0x446u)
#define POLICANBENT_GRETA_ERROR_FRAME_ID (0x221u)
#define POLICANBENT_WHEREAMI_DATA_FRAME_ID (0x460u)
#define POLICANBENT_WHEREAMI_COORDS_FRAME_ID (0x464u)
#define POLICANBENT_DUMBMS1_ERROR_FRAME_ID (0x280u)
#define POLICANBENT_DUMBMS2_ERROR_FRAME_ID (0x2a0u)
#define POLICANBENT_DUMBMS1_DATA_FRAME_ID (0x480u)
#define POLICANBENT_DUMBMS2_DATA_FRAME_ID (0x4a0u)
#define POLICANBENT_WHEREAMI_RAW_DATA_FRAME_ID (0x462u)
#define POLICANBENT_WHEREAMI_POS_UNCERT_FRAME_ID (0x468u)
#define POLICANBENT_REFUSO_DATA_FRAME_ID (0x24u)

/* Frame lengths in bytes. */
#define POLICANBENT_GB_ERROR_LENGTH (1u)
#define POLICANBENT_GB_DATA_LENGTH (1u)
#define POLICANBENT_GRETA_DATA_LENGTH (2u)
#define POLICANBENT_BOB_SRM_POWER_LENGTH (2u)
#define POLICANBENT_BOB_SRM_CADENCE_LENGTH (2u)
#define POLICANBENT_BOB_HS_SPEED_LENGTH (2u)
#define POLICANBENT_BOB_HS_DISPLACEMENT_LENGTH (2u)
#define POLICANBENT_BOB_HR_LENGTH (1u)
#define POLICANBENT_GRETA_ERROR_LENGTH (1u)
#define POLICANBENT_WHEREAMI_DATA_LENGTH (4u)
#define POLICANBENT_WHEREAMI_COORDS_LENGTH (8u)
#define POLICANBENT_DUMBMS1_ERROR_LENGTH (1u)
#define POLICANBENT_DUMBMS2_ERROR_LENGTH (1u)
#define POLICANBENT_DUMBMS1_DATA_LENGTH (5u)
#define POLICANBENT_DUMBMS2_DATA_LENGTH (5u)
#define POLICANBENT_WHEREAMI_RAW_DATA_LENGTH (4u)
#define POLICANBENT_WHEREAMI_POS_UNCERT_LENGTH (2u)
#define POLICANBENT_REFUSO_DATA_LENGTH (2u)

/* Extended or standard frame types. */
#define POLICANBENT_GB_ERROR_IS_EXTENDED (0)
#define POLICANBENT_GB_DATA_IS_EXTENDED (0)
#define POLICANBENT_GRETA_DATA_IS_EXTENDED (0)
#define POLICANBENT_BOB_SRM_POWER_IS_EXTENDED (0)
#define POLICANBENT_BOB_SRM_CADENCE_IS_EXTENDED (0)
#define POLICANBENT_BOB_HS_SPEED_IS_EXTENDED (0)
#define POLICANBENT_BOB_HS_DISPLACEMENT_IS_EXTENDED (0)
#define POLICANBENT_BOB_HR_IS_EXTENDED (0)
#define POLICANBENT_GRETA_ERROR_IS_EXTENDED (0)
#define POLICANBENT_WHEREAMI_DATA_IS_EXTENDED (0)
#define POLICANBENT_WHEREAMI_COORDS_IS_EXTENDED (0)
#define POLICANBENT_DUMBMS1_ERROR_IS_EXTENDED (0)
#define POLICANBENT_DUMBMS2_ERROR_IS_EXTENDED (0)
#define POLICANBENT_DUMBMS1_DATA_IS_EXTENDED (0)
#define POLICANBENT_DUMBMS2_DATA_IS_EXTENDED (0)
#define POLICANBENT_WHEREAMI_RAW_DATA_IS_EXTENDED (0)
#define POLICANBENT_WHEREAMI_POS_UNCERT_IS_EXTENDED (0)
#define POLICANBENT_REFUSO_DATA_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define POLICANBENT_GB_ERROR_NAME "GbError"
#define POLICANBENT_GB_DATA_NAME "GbData"
#define POLICANBENT_GRETA_DATA_NAME "GretaData"
#define POLICANBENT_BOB_SRM_POWER_NAME "BobSrmPower"
#define POLICANBENT_BOB_SRM_CADENCE_NAME "BobSrmCadence"
#define POLICANBENT_BOB_HS_SPEED_NAME "BobHsSpeed"
#define POLICANBENT_BOB_HS_DISPLACEMENT_NAME "BobHsDisplacement"
#define POLICANBENT_BOB_HR_NAME "BobHR"
#define POLICANBENT_GRETA_ERROR_NAME "GretaError"
#define POLICANBENT_WHEREAMI_DATA_NAME "whereamiData"
#define POLICANBENT_WHEREAMI_COORDS_NAME "whereamiCoords"
#define POLICANBENT_DUMBMS1_ERROR_NAME "Dumbms1Error"
#define POLICANBENT_DUMBMS2_ERROR_NAME "Dumbms2Error"
#define POLICANBENT_DUMBMS1_DATA_NAME "Dumbms1Data"
#define POLICANBENT_DUMBMS2_DATA_NAME "Dumbms2Data"
#define POLICANBENT_WHEREAMI_RAW_DATA_NAME "whereamiRawData"
#define POLICANBENT_WHEREAMI_POS_UNCERT_NAME "whereamiPosUncert"
#define POLICANBENT_REFUSO_DATA_NAME "RefusoData"

/* Signal Names. */
#define POLICANBENT_GB_ERROR_GB_ERR_CODE_NAME "GbErrCode"
#define POLICANBENT_GB_ERROR_GB_GEAR_NAME "GbGear"
#define POLICANBENT_GB_DATA_GB_GEAR_NAME "GbGear"
#define POLICANBENT_GRETA_DATA_TELEK_BATTERY_NAME "TelekBattery"
#define POLICANBENT_GRETA_DATA_RX_SHIFTING_NAME "RxShifting"
#define POLICANBENT_BOB_SRM_POWER_SRM_POWER_NAME "SrmPower"
#define POLICANBENT_BOB_SRM_CADENCE_SRM_CADENCE_NAME "SrmCadence"
#define POLICANBENT_BOB_HS_SPEED_HS_SPEED_NAME "HsSpeed"
#define POLICANBENT_BOB_HS_DISPLACEMENT_HS_DISPLACEMENT_NAME "HsDisplacement"
#define POLICANBENT_BOB_HR_HEART_RATE_NAME "HeartRate"
#define POLICANBENT_GRETA_ERROR_TIME_OUT_ERROR_NAME "TimeOutError"
#define POLICANBENT_WHEREAMI_DATA_SPEED_NAME "Speed"
#define POLICANBENT_WHEREAMI_DATA_DISTANCE_NAME "Distance"
#define POLICANBENT_WHEREAMI_COORDS_LATITUDE_NAME "Latitude"
#define POLICANBENT_WHEREAMI_COORDS_LONGITUDE_NAME "Longitude"
#define POLICANBENT_DUMBMS1_ERROR_BAT0_UNDER_VOLT_NAME "Bat0UnderVolt"
#define POLICANBENT_DUMBMS1_ERROR_BAT1_UNDER_VOLT_NAME "Bat1UnderVolt"
#define POLICANBENT_DUMBMS1_ERROR_BAT2_UNDER_VOLT_NAME "Bat2UnderVolt"
#define POLICANBENT_DUMBMS1_ERROR_BAT3_UNDER_VOLT_NAME "Bat3UnderVolt"
#define POLICANBENT_DUMBMS1_ERROR_BAT4_UNDER_VOLT_NAME "Bat4UnderVolt"
#define POLICANBENT_DUMBMS2_ERROR_BAT0_UNDER_VOLT_NAME "Bat0UnderVolt"
#define POLICANBENT_DUMBMS2_ERROR_BAT1_UNDER_VOLT_NAME "Bat1UnderVolt"
#define POLICANBENT_DUMBMS2_ERROR_BAT2_UNDER_VOLT_NAME "Bat2UnderVolt"
#define POLICANBENT_DUMBMS2_ERROR_BAT3_UNDER_VOLT_NAME "Bat3UnderVolt"
#define POLICANBENT_DUMBMS2_ERROR_BAT4_UNDER_VOLT_NAME "Bat4UnderVolt"
#define POLICANBENT_DUMBMS1_DATA_BAT0_VOLTAGE_NAME "Bat0Voltage"
#define POLICANBENT_DUMBMS1_DATA_BAT1_VOLTAGE_NAME "Bat1Voltage"
#define POLICANBENT_DUMBMS1_DATA_BAT2_VOLTAGE_NAME "Bat2Voltage"
#define POLICANBENT_DUMBMS1_DATA_BAT3_VOLTAGE_NAME "Bat3Voltage"
#define POLICANBENT_DUMBMS1_DATA_BAT4_VOLTAGE_NAME "Bat4Voltage"
#define POLICANBENT_DUMBMS2_DATA_BAT0_VOLTAGE_NAME "Bat0Voltage"
#define POLICANBENT_DUMBMS2_DATA_BAT1_VOLTAGE_NAME "Bat1Voltage"
#define POLICANBENT_DUMBMS2_DATA_BAT2_VOLTAGE_NAME "Bat2Voltage"
#define POLICANBENT_DUMBMS2_DATA_BAT3_VOLTAGE_NAME "Bat3Voltage"
#define POLICANBENT_DUMBMS2_DATA_BAT4_VOLTAGE_NAME "Bat4Voltage"
#define POLICANBENT_WHEREAMI_RAW_DATA_RAW_SPEED_NAME "RawSpeed"
#define POLICANBENT_WHEREAMI_RAW_DATA_RAW_DISTANCE_NAME "RawDistance"
#define POLICANBENT_WHEREAMI_POS_UNCERT_POS_UNCERTAINTY_NAME "PosUncertainty"
#define POLICANBENT_REFUSO_DATA_POSITION_NAME "Position"

/**
 * Signals in message GbError.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_gb_error_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gb_err_code;

    /**
     * Range: 0..16 (0..16 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gb_gear;
};

/**
 * Signals in message GbData.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_gb_data_t {
    /**
     * Range: 0..16 (0..16 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gb_gear;
};

/**
 * Signals in message GretaData.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_greta_data_t {
    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t telek_battery;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rx_shifting;
};

/**
 * Signals in message BobSrmPower.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_bob_srm_power_t {
    /**
     * Range: 0..10000 (0..1000 W)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t srm_power;
};

/**
 * Signals in message BobSrmCadence.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_bob_srm_cadence_t {
    /**
     * Range: 0..10000 (0..1000 rpm)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t srm_cadence;
};

/**
 * Signals in message BobHsSpeed.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_bob_hs_speed_t {
    /**
     * Range: 0..20000 (0..200 km/h)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t hs_speed;
};

/**
 * Signals in message BobHsDisplacement.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_bob_hs_displacement_t {
    /**
     * Range: 0..200000 (0..20000 m)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t hs_displacement;
};

/**
 * Signals in message BobHR.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_bob_hr_t {
    /**
     * Range: 0..250 (0..250 bpm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t heart_rate;
};

/**
 * Signals in message GretaError.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_greta_error_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t time_out_error;
};

/**
 * Signals in message whereamiData.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_whereami_data_t {
    /**
     * Range: 0..20000 (0..200 km/h)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t speed;

    /**
     * Range: 0..20000 (0..20000 m)
     * Scale: 1
     * Offset: 0
     */
    uint16_t distance;
};

/**
 * Signals in message whereamiCoords.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_whereami_coords_t {
    /**
     * Range: -90000000..90000000 (-90..90 Â°)
     * Scale: 1e-06
     * Offset: 0
     */
    int32_t latitude;

    /**
     * Range: -180000000..180000000 (-180..180 Â°)
     * Scale: 1e-06
     * Offset: 0
     */
    int32_t longitude;
};

/**
 * Signals in message Dumbms1Error.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_dumbms1_error_t {
    /**
     * DumBMS LiPo undervoltage detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bat0_under_volt;

    /**
     * 3S slot 1 undervoltage detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bat1_under_volt;

    /**
     * 3S slot 2 undervoltage detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bat2_under_volt;

    /**
     * 3S slot 3 undervoltage detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bat3_under_volt;

    /**
     * 3S slot 4 undervoltage detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bat4_under_volt;
};

/**
 * Signals in message Dumbms2Error.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_dumbms2_error_t {
    /**
     * DumBMS LiPo undervoltage detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bat0_under_volt;

    /**
     * 3S slot 1 undervoltage detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bat1_under_volt;

    /**
     * 3S slot 2 undervoltage detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bat2_under_volt;

    /**
     * 3S slot 3 undervoltage detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bat3_under_volt;

    /**
     * 3S slot 4 undervoltage detected
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t bat4_under_volt;
};

/**
 * Signals in message Dumbms1Data.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_dumbms1_data_t {
    /**
     * Range: 0..150 (0..15 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t bat0_voltage;

    /**
     * Range: 0..150 (0..15 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t bat1_voltage;

    /**
     * Range: 0..150 (0..15 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t bat2_voltage;

    /**
     * Range: 0..150 (0..15 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t bat3_voltage;

    /**
     * Range: 0..150 (0..15 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t bat4_voltage;
};

/**
 * Signals in message Dumbms2Data.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_dumbms2_data_t {
    /**
     * Range: 0..150 (0..15 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t bat0_voltage;

    /**
     * Range: 0..150 (0..15 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t bat1_voltage;

    /**
     * Range: 0..150 (0..15 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t bat2_voltage;

    /**
     * Range: 0..150 (0..15 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t bat3_voltage;

    /**
     * Range: 0..150 (0..15 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t bat4_voltage;
};

/**
 * Signals in message whereamiRawData.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_whereami_raw_data_t {
    /**
     * Range: 0..20000 (0..200 km/h)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t raw_speed;

    /**
     * Range: 0..20000 (0..20000 m)
     * Scale: 1
     * Offset: 0
     */
    uint16_t raw_distance;
};

/**
 * Signals in message whereamiPosUncert.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_whereami_pos_uncert_t {
    /**
     * Range: 0..10000 (0..100 m)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t pos_uncertainty;
};

/**
 * Signals in message RefusoData.
 *
 * All signal values are as on the CAN bus.
 */
struct policanbent_refuso_data_t {
    /**
     * Range: 0..1000 (0..10 V)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t position;
};

/**
 * Pack message GbError.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_gb_error_pack(
    uint8_t *dst_p,
    const struct policanbent_gb_error_t *src_p,
    size_t size);

/**
 * Unpack message GbError.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_gb_error_unpack(
    struct policanbent_gb_error_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GbError.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int policanbent_gb_error_init(struct policanbent_gb_error_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_gb_error_gb_err_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_gb_error_gb_err_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_gb_error_gb_err_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_gb_error_gb_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_gb_error_gb_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_gb_error_gb_gear_is_in_range(uint8_t value);

/**
 * Pack message GbData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_gb_data_pack(
    uint8_t *dst_p,
    const struct policanbent_gb_data_t *src_p,
    size_t size);

/**
 * Unpack message GbData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_gb_data_unpack(
    struct policanbent_gb_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GbData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int policanbent_gb_data_init(struct policanbent_gb_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_gb_data_gb_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_gb_data_gb_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_gb_data_gb_gear_is_in_range(uint8_t value);

/**
 * Pack message GretaData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_greta_data_pack(
    uint8_t *dst_p,
    const struct policanbent_greta_data_t *src_p,
    size_t size);

/**
 * Unpack message GretaData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_greta_data_unpack(
    struct policanbent_greta_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GretaData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int policanbent_greta_data_init(struct policanbent_greta_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_greta_data_telek_battery_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_greta_data_telek_battery_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_greta_data_telek_battery_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_greta_data_rx_shifting_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_greta_data_rx_shifting_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_greta_data_rx_shifting_is_in_range(uint8_t value);

/**
 * Pack message BobSrmPower.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_bob_srm_power_pack(
    uint8_t *dst_p,
    const struct policanbent_bob_srm_power_t *src_p,
    size_t size);

/**
 * Unpack message BobSrmPower.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_bob_srm_power_unpack(
    struct policanbent_bob_srm_power_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BobSrmPower.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int policanbent_bob_srm_power_init(struct policanbent_bob_srm_power_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t policanbent_bob_srm_power_srm_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_bob_srm_power_srm_power_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_bob_srm_power_srm_power_is_in_range(uint16_t value);

/**
 * Pack message BobSrmCadence.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_bob_srm_cadence_pack(
    uint8_t *dst_p,
    const struct policanbent_bob_srm_cadence_t *src_p,
    size_t size);

/**
 * Unpack message BobSrmCadence.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_bob_srm_cadence_unpack(
    struct policanbent_bob_srm_cadence_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BobSrmCadence.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int policanbent_bob_srm_cadence_init(struct policanbent_bob_srm_cadence_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t policanbent_bob_srm_cadence_srm_cadence_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_bob_srm_cadence_srm_cadence_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_bob_srm_cadence_srm_cadence_is_in_range(uint16_t value);

/**
 * Pack message BobHsSpeed.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_bob_hs_speed_pack(
    uint8_t *dst_p,
    const struct policanbent_bob_hs_speed_t *src_p,
    size_t size);

/**
 * Unpack message BobHsSpeed.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_bob_hs_speed_unpack(
    struct policanbent_bob_hs_speed_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BobHsSpeed.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int policanbent_bob_hs_speed_init(struct policanbent_bob_hs_speed_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t policanbent_bob_hs_speed_hs_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_bob_hs_speed_hs_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_bob_hs_speed_hs_speed_is_in_range(uint16_t value);

/**
 * Pack message BobHsDisplacement.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_bob_hs_displacement_pack(
    uint8_t *dst_p,
    const struct policanbent_bob_hs_displacement_t *src_p,
    size_t size);

/**
 * Unpack message BobHsDisplacement.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_bob_hs_displacement_unpack(
    struct policanbent_bob_hs_displacement_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BobHsDisplacement.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int policanbent_bob_hs_displacement_init(struct policanbent_bob_hs_displacement_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t policanbent_bob_hs_displacement_hs_displacement_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_bob_hs_displacement_hs_displacement_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_bob_hs_displacement_hs_displacement_is_in_range(uint16_t value);

/**
 * Pack message BobHR.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_bob_hr_pack(
    uint8_t *dst_p,
    const struct policanbent_bob_hr_t *src_p,
    size_t size);

/**
 * Unpack message BobHR.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_bob_hr_unpack(
    struct policanbent_bob_hr_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from BobHR.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int policanbent_bob_hr_init(struct policanbent_bob_hr_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_bob_hr_heart_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_bob_hr_heart_rate_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_bob_hr_heart_rate_is_in_range(uint8_t value);

/**
 * Pack message GretaError.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_greta_error_pack(
    uint8_t *dst_p,
    const struct policanbent_greta_error_t *src_p,
    size_t size);

/**
 * Unpack message GretaError.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_greta_error_unpack(
    struct policanbent_greta_error_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GretaError.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int policanbent_greta_error_init(struct policanbent_greta_error_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_greta_error_time_out_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_greta_error_time_out_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_greta_error_time_out_error_is_in_range(uint8_t value);

/**
 * Pack message whereamiData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_whereami_data_pack(
    uint8_t *dst_p,
    const struct policanbent_whereami_data_t *src_p,
    size_t size);

/**
 * Unpack message whereamiData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_whereami_data_unpack(
    struct policanbent_whereami_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from whereamiData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int policanbent_whereami_data_init(struct policanbent_whereami_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t policanbent_whereami_data_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_whereami_data_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_whereami_data_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t policanbent_whereami_data_distance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_whereami_data_distance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_whereami_data_distance_is_in_range(uint16_t value);

/**
 * Pack message whereamiCoords.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_whereami_coords_pack(
    uint8_t *dst_p,
    const struct policanbent_whereami_coords_t *src_p,
    size_t size);

/**
 * Unpack message whereamiCoords.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_whereami_coords_unpack(
    struct policanbent_whereami_coords_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from whereamiCoords.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int policanbent_whereami_coords_init(struct policanbent_whereami_coords_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t policanbent_whereami_coords_latitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_whereami_coords_latitude_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_whereami_coords_latitude_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t policanbent_whereami_coords_longitude_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_whereami_coords_longitude_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_whereami_coords_longitude_is_in_range(int32_t value);

/**
 * Pack message Dumbms1Error.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_dumbms1_error_pack(
    uint8_t *dst_p,
    const struct policanbent_dumbms1_error_t *src_p,
    size_t size);

/**
 * Unpack message Dumbms1Error.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_dumbms1_error_unpack(
    struct policanbent_dumbms1_error_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Dumbms1Error.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int policanbent_dumbms1_error_init(struct policanbent_dumbms1_error_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_dumbms1_error_bat0_under_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_dumbms1_error_bat0_under_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_dumbms1_error_bat0_under_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_dumbms1_error_bat1_under_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_dumbms1_error_bat1_under_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_dumbms1_error_bat1_under_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_dumbms1_error_bat2_under_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_dumbms1_error_bat2_under_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_dumbms1_error_bat2_under_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_dumbms1_error_bat3_under_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_dumbms1_error_bat3_under_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_dumbms1_error_bat3_under_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_dumbms1_error_bat4_under_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_dumbms1_error_bat4_under_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_dumbms1_error_bat4_under_volt_is_in_range(uint8_t value);

/**
 * Pack message Dumbms2Error.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_dumbms2_error_pack(
    uint8_t *dst_p,
    const struct policanbent_dumbms2_error_t *src_p,
    size_t size);

/**
 * Unpack message Dumbms2Error.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_dumbms2_error_unpack(
    struct policanbent_dumbms2_error_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Dumbms2Error.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int policanbent_dumbms2_error_init(struct policanbent_dumbms2_error_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_dumbms2_error_bat0_under_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_dumbms2_error_bat0_under_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_dumbms2_error_bat0_under_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_dumbms2_error_bat1_under_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_dumbms2_error_bat1_under_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_dumbms2_error_bat1_under_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_dumbms2_error_bat2_under_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_dumbms2_error_bat2_under_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_dumbms2_error_bat2_under_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_dumbms2_error_bat3_under_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_dumbms2_error_bat3_under_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_dumbms2_error_bat3_under_volt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_dumbms2_error_bat4_under_volt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_dumbms2_error_bat4_under_volt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_dumbms2_error_bat4_under_volt_is_in_range(uint8_t value);

/**
 * Pack message Dumbms1Data.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_dumbms1_data_pack(
    uint8_t *dst_p,
    const struct policanbent_dumbms1_data_t *src_p,
    size_t size);

/**
 * Unpack message Dumbms1Data.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_dumbms1_data_unpack(
    struct policanbent_dumbms1_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Dumbms1Data.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int policanbent_dumbms1_data_init(struct policanbent_dumbms1_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_dumbms1_data_bat0_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_dumbms1_data_bat0_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_dumbms1_data_bat0_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_dumbms1_data_bat1_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_dumbms1_data_bat1_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_dumbms1_data_bat1_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_dumbms1_data_bat2_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_dumbms1_data_bat2_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_dumbms1_data_bat2_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_dumbms1_data_bat3_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_dumbms1_data_bat3_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_dumbms1_data_bat3_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_dumbms1_data_bat4_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_dumbms1_data_bat4_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_dumbms1_data_bat4_voltage_is_in_range(uint8_t value);

/**
 * Pack message Dumbms2Data.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_dumbms2_data_pack(
    uint8_t *dst_p,
    const struct policanbent_dumbms2_data_t *src_p,
    size_t size);

/**
 * Unpack message Dumbms2Data.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_dumbms2_data_unpack(
    struct policanbent_dumbms2_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Dumbms2Data.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int policanbent_dumbms2_data_init(struct policanbent_dumbms2_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_dumbms2_data_bat0_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_dumbms2_data_bat0_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_dumbms2_data_bat0_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_dumbms2_data_bat1_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_dumbms2_data_bat1_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_dumbms2_data_bat1_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_dumbms2_data_bat2_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_dumbms2_data_bat2_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_dumbms2_data_bat2_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_dumbms2_data_bat3_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_dumbms2_data_bat3_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_dumbms2_data_bat3_voltage_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t policanbent_dumbms2_data_bat4_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_dumbms2_data_bat4_voltage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_dumbms2_data_bat4_voltage_is_in_range(uint8_t value);

/**
 * Pack message whereamiRawData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_whereami_raw_data_pack(
    uint8_t *dst_p,
    const struct policanbent_whereami_raw_data_t *src_p,
    size_t size);

/**
 * Unpack message whereamiRawData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_whereami_raw_data_unpack(
    struct policanbent_whereami_raw_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from whereamiRawData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int policanbent_whereami_raw_data_init(struct policanbent_whereami_raw_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t policanbent_whereami_raw_data_raw_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_whereami_raw_data_raw_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_whereami_raw_data_raw_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t policanbent_whereami_raw_data_raw_distance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_whereami_raw_data_raw_distance_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_whereami_raw_data_raw_distance_is_in_range(uint16_t value);

/**
 * Pack message whereamiPosUncert.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_whereami_pos_uncert_pack(
    uint8_t *dst_p,
    const struct policanbent_whereami_pos_uncert_t *src_p,
    size_t size);

/**
 * Unpack message whereamiPosUncert.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_whereami_pos_uncert_unpack(
    struct policanbent_whereami_pos_uncert_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from whereamiPosUncert.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int policanbent_whereami_pos_uncert_init(struct policanbent_whereami_pos_uncert_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t policanbent_whereami_pos_uncert_pos_uncertainty_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_whereami_pos_uncert_pos_uncertainty_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_whereami_pos_uncert_pos_uncertainty_is_in_range(uint16_t value);

/**
 * Pack message RefusoData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int policanbent_refuso_data_pack(
    uint8_t *dst_p,
    const struct policanbent_refuso_data_t *src_p,
    size_t size);

/**
 * Unpack message RefusoData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int policanbent_refuso_data_unpack(
    struct policanbent_refuso_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RefusoData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int policanbent_refuso_data_init(struct policanbent_refuso_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t policanbent_refuso_data_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double policanbent_refuso_data_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool policanbent_refuso_data_position_is_in_range(uint16_t value);


#ifdef __cplusplus
}
#endif

#endif
